# Making Kinda Operational Banking System
# Balance Start at RM 1000
# Minimum Current Balance RM 500
# Minimum Savings Balance RM 100
# Copy paste (S:S:S:S:000000:Super000000:1) into the UserRecords.txt file and press enter after copy-pasting it
# Add '1' to the UserIDIndex.txt file
# 3.1 is Savings Account
# 3.2 is Current Account
import datetime

try:
	Create_User_Records = open("UserRecords.txt", "x")
	Create_Transaction_Record = open("UserTransaction.txt", "x")
	Create_UserID_Index = open("UserIDIndex.txt", "x")
except:
	pass

def Create_User_ID():
	'''
	Return new autogenerated User ID
	'''
	Index = ['0','0','0','0','0','0']
	with open("UserIDIndex.txt") as Open_UserID_Index:
		Find_UserID = Open_UserID_Index.read()
		Negative_Index = -1 
		for i in Find_UserID[::-1]: #[::-1] To reverse a number 
			Index[Negative_Index] = i  #To enter the reversed number to the last index in the array
			Negative_Index -= 1 #To move to the next index in the array from right to left 
		Addition_UserID = ''.join(Index)
	with open("UserIDIndex.txt", "w") as Overwrite_UserID_Index:
		To_Overwrite_UserID_Index = int(Find_UserID) + 1
		Overwrite_UserID_Index.write(str(To_Overwrite_UserID_Index))

	return Addition_UserID

def Create_Reg_User():
	'''
	Creates User account and returns User ID and passowrd
	'''
	Name_Input = input("Enter Name : ")
	TP_Number_Input = input("Enter TP Number : ")
	Birth_Date_Input = input("Enter Birthdate : ")
	Address_Input = input("Enter Address (Don't enter your real address) : ")
	User_ID = Create_User_ID()
	User_Password = "User" + User_ID
	User_Option = input("Choose Account Type : \n\t1) Savings \n\t2) Current \n : ")
	if User_Option == "1":
		User_Account_Type = "3.1"
		User_Balance = "RM 1000"
		User_Deposit = "-"
		User_Withdrawal = "-"
		User_Date = "-"
	elif User_Option == "2":
		User_Account_Type = "3.2"
		User_Balance = "RM 1000"
		User_Deposit = "-"
		User_Withdrawal = "-"
		User_Date = "-"
	Collect_Data = Name_Input + ":" + TP_Number_Input + ":" + Birth_Date_Input + ":" + Address_Input + ":" + User_ID + ":" + User_Password  + ":" + User_Account_Type

	Print_ID_Password = print("==================== \nUser ID : " + User_ID + "\nUser Password : " + User_Password + "\n====================")

	with open("UserRecords.txt", "a") as Store_Data:
		Store_Data.write(Collect_Data + "\n")

	Collect_Data_2 = Name_Input + ":" + User_ID + ":" + User_Account_Type + ":" + User_Balance + ":" + User_Deposit + ":" + User_Withdrawal + ":" + User_Date
	with open("UserTransaction.txt", "a") as Store_Transaction_Data:
		Store_Transaction_Data.write(Collect_Data_2 + "\n")

	return Print_ID_Password

def Create_BankAdmin_Account():
	'''
	Creates Admin account and returns User ID and passowrd
	'''
	Name_Input = input("Enter Name : ")
	TP_Number_Input = input("Enter TP Number : ")
	Birth_Date_Input = input("Enter Birthdate : ")
	Address_Input = input("Enter Address (Don't enter your real address of course) : ")
	User_ID = Create_User_ID()
	User_Password = "Admin" + User_ID
	User_Account_Type = "2"

	Collect_Data = Name_Input + ":" + TP_Number_Input + ":" + Birth_Date_Input + ":" + Address_Input + ":" + User_ID + ":" + User_Password  + ":" + User_Account_Type


	Print_ID_Password = print("\n==================== \nUser ID : " + User_ID + "\nPassword : " + User_Password + "\n====================")

	with open("UserRecords.txt", "a") as Store_Data:
		Store_Data.write(Collect_Data + "\n")

	return Print_ID_Password

def Display_AllUser():
	'''
	Displays all account
	'''
	with open("UserRecords.txt", "r") as Fetch_Data:
		Print_Fetch_Data = print("~~~~~~~~~~~~~~~~~~~~\nUser Accounts : " + "\n" + Fetch_Data.read())
	return Print_Fetch_Data

def Super_Admin_Interf(User_Name):
	'''
	Displays Super Admin/User interface
	'''
	print("\n~~~~~~~~~~~~~~~~~~~~ \nSUPER ADMIN INTERFACE \n~~~~~~~~~~~~~~~~~~~~ \nWelcome " + User_Name + "!")
	while True:
		User_Option = input("\t1) Create Bank Admin Account \n\t2) Display All User \n\t3) Back to login page \n : ")
		if User_Option == "1":
			Create_BankAdmin_Account()
		elif User_Option == "2":
			Display_AllUser()
		elif User_Option == "3":
			break

def Modify_Reg_User_Account():
	'''
	Displays modify regular user account interface
	'''
	print("\n~~~~~~~~~~~~~~~~~~~~ \nMODIFY USER INTERFACE \n~~~~~~~~~~~~~~~~~~~~ ")
	User_Option = input("\n\t1) TP Number \n\t2) Birthdate \n\t3) Address \n : ")
	User_ID = input("\nInput User ID : ")
	User_Name = input("Input User Name : ")

	print("\n======================================= \n|| User ID : " + User_ID + " || User Name : " + User_Name + " || \n======================================= ")

	fc = 0
	if User_Option == "1":
		TP_Number_Input = input("\nEnter New TP Number : ")
	elif User_Option == "2":
		Birthdate_Input = input("\nEnter New Birthdate : ")
	elif User_Option == "3":
		Address_Input = input("\nEnter New Address : ")
	with open("UserRecords.txt") as Fetch_Data:
		for Line in Fetch_Data:
			Slice_Data = Line.strip("\n").split(":")
			# if User_ID == Slice_Data[4]:
			if Line.startswith(User_Name) == False:
				fc += 1
			if User_Option == "1":
				# TP_Number_Input = input("Enter New TP Number : ")
				Slice_Data[1] = TP_Number_Input
				New_Data = ":".join(Slice_Data) + "\n"
			elif User_Option == "2":
				# Birthdate_Input = input("Enter New Birthdate : ")
				Slice_Data[2] = Birthdate_Input
				New_Data = ":".join(Slice_Data) + "\n"
			elif User_Option == "3":
				# Address_Input = input("Enter New Address : ")
				Slice_Data[3] = Address_Input
				New_Data = ":".join(Slice_Data) + "\n"

	Fetch_User_Records = open("UserRecords.txt", "r")
	Read_The_Lines = Fetch_User_Records.readlines()
	Read_The_Lines[fc] = New_Data

	Over_Write_User_Records = open("UserRecords.txt", "w")
	Over_Write_User_Records.writelines(Read_The_Lines)
	Over_Write_User_Records.close()
			
def Bank_Admin_Interf(User_Name):
	'''
	Displays bank admin interface
	'''
	print("\n~~~~~~~~~~~~~~~~~~~~ \nBANK ADMIN INTERFACE \n~~~~~~~~~~~~~~~~~~~~ \nWelcome " + User_Name + "!")
	while True:
		User_Option = input("\n\t1) Create Regular User Account \n\t2) Modify Regular User Account \n\t3) Back to Login Page \n : ")
		if User_Option == "1":
			Create_Reg_User()
		elif User_Option == "2":
			Modify_Reg_User_Account()
		elif User_Option == "3":
			break

def Reg_User_Savings_Interf(User_Name, User_ID):
	Now_Date = datetime.datetime.now()
	Store_Transaction = open("UserTransaction.txt", "r")
	for Lines in Store_Transaction:
		Split_Split = Lines.strip("\n").split(":")
	if User_Name == Split_Split[0] and  User_ID == Split_Split[1]:
		while True:
			User_Option = input("\n~~~~~~~~~~~~~~~~~~~~ \n\t1) Deposit \n\t2) Withdrawal \n\t3) Check Balance \n\t4) Change Password \n\t5) Check Account Transaction \n\t6) Quit \n : ")
			print("~~~~~~~~~~~~~~~~~~~~")
			Split_Split[4] = "-"
			Split_Split[5] = "-"
			Split_Split[6] = "-"
			if User_Option == "1":
				Deposit_Option  = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter a nominal to deposit \n : ")
				print("~~~~~~~~~~~~~~~~~~~~")
				# if int(Deposit_Option) in [10, 20, 50, 100, 500]:
				Split_Balance = Split_Split[3].split()
				Split_Balance[1] = str(int(Split_Balance[1]) + int(Deposit_Option)) 
				Attach_SplitBalance = [str(Dt) for Dt in Split_Balance] #Combine String and Integer in a list
				ReAttach_SplitBalance = " ".join(Attach_SplitBalance)
				Split_Split[3] = ReAttach_SplitBalance
				Split_Split[4] = "+RM " + Deposit_Option
				Split_Split[6] = Now_Date.strftime("%d %B %Y")
				ReAttach_SplitSplit = ":".join(Split_Split) + "\n"
				print("Account Balance : " + Split_Split[3])
				Store_Dt = open("UserTransaction.txt", "a")
				Store_Dt.write(ReAttach_SplitSplit)
				# elif Deposit_Option == "Other":
				# 	Deposit_Other = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter nominal to deposit : ")
				# 	print("~~~~~~~~~~~~~~~~~~~~")
				# 	with open("UserTransaction.txt", "r") as Store_Transaction:
				# 		for Lines in Store_Transaction:
				# 			Split_Split = Lines.strip("\n").split(":")
				# 			if User_Name == Split_Split[0] and User_ID == Split_Split[1]:
				# 				Split_Balance = Split_Split[2].split()
				# 				Split_Balance[1] = str(int(Split_Balance[1]) + int(Deposit_Other)) 
				# 				Attach_SplitBalance = [str(Dt) for Dt in Split_Balance]
				# 				ReAttach_SplitBalance = " ".join(Attach_SplitBalance)
				# 				Split_Split[2] = ReAttach_SplitBalance
				# 				Split_Split[3] = "+RM " + Deposit_Other
				# 				Split_Split[5] = Now_Date.strftime("%d %B %Y - %H:%M:%S")
				# 				ReAttach_SplitSplit = ":".join(Split_Split) + "\n"
				# 	Store_Dt = open("UserTransaction.txt", "a")
				# 	Store_Dt.write(ReAttach_SplitSplit)
			elif User_Option == "2":
				Withdraw_Option = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter nominal to withdraw : ")
				print("~~~~~~~~~~~~~~~~~~~~")
				Split_Balance = Split_Split[3].split()
				if int(Split_Balance[1]) < 500:
					print("Balance not enough! Please deposit or win the lottery.")
					quit()
				else:
					Split_Balance[1] = str(int(Split_Balance[1]) - int(Withdraw_Option)) 
					Attach_SplitBalance = [str(Dt) for Dt in Split_Balance]
					ReAttach_SplitBalance = " ".join(Attach_SplitBalance)
					Split_Split[3] = ReAttach_SplitBalance
					Split_Split[5] = "-RM " + Withdraw_Option
					Split_Split[6] = Now_Date.strftime("%d %B %Y")
					ReAttach_SplitSplit = ":".join(Split_Split) + "\n"
					print("Account Balance : " + Split_Split[3])

				Store_Dt = open("UserTransaction.txt", "a")
				Store_Dt.write(ReAttach_SplitSplit)
			elif User_Option == "3":
				print("Account Balance : " + Split_Split[3])
			elif User_Option == "4":
				fc = 0
				Pass_Input = input("Enter new password : ")
				with open("UserRecords.txt", "r") as Fetch_Dt:
					for Line in Fetch_Dt:
						Split_Split = Line.strip("\n").split(":")
						# if User_Name == Split_Split[0] and User_ID == Split_Split[4]:
						if Line.startswith(User_Name) == False:
							fc += 1
						Split_Split[5] = Pass_Input
						New_Pass = ":".join(Split_Split) + "\n"
				Fetch_DD = open("UserRecords.txt", "r")
				Store_DD = Fetch_DD.readlines()
				Store_DD[fc] = New_Pass

				Over_Write = open("UserRecords.txt", "w")
				Over_Write.writelines(Store_DD)
				Over_Write.close()
			elif User_Option == "5":
				Mutation_Opt = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter Date (ex: 22 November 2020) \n : ")
				print("~~~~~~~~~~~~~~~~~~~~")
				with open("UserTransaction.txt", "r") as Fetch_Fetch:
					for Lines in Fetch_Fetch:
						Split_Split = Lines.strip("\n").split(":")
						if Mutation_Opt == Split_Split[6]:
							print("|| User Name : " + Split_Split[0] + " || User ID : " + Split_Split[1] + " || User Balance : " + Split_Split[3] + " || Deposit : " + Split_Split[4] + " || Withdrawal : " + Split_Split[5] + " || Date : " + Split_Split[6] + " ||")
				
			elif User_Option == "6":
				Store_Transaction.close()
				break

def Reg_User_Current_Interf(User_Name, User_ID):
	Now_Date = datetime.datetime.now()
	Store_Transaction = open("UserTransaction.txt", "r")
	for Lines in Store_Transaction:
		Split_Split = Lines.strip("\n").split(":")
	if User_Name == Split_Split[0] and  User_ID == Split_Split[1]:
		while True:
			User_Option = input("\n~~~~~~~~~~~~~~~~~~~~ \n\t1) Deposit \n\t2) Withdrawal \n\t3) Check Balance \n\t4) Change Password \n\t5) Check Account Transaction \n\t6) Quit \n : ")
			print("~~~~~~~~~~~~~~~~~~~~")
			Split_Split[4] = "-"
			Split_Split[5] = "-"
			Split_Split[6] = "-"
			if User_Option == "1":
				Deposit_Option  = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter a nominal to deposit \n : ")
				print("~~~~~~~~~~~~~~~~~~~~")
				# if int(Deposit_Option) in [10, 20, 50, 100, 500]:
				Split_Balance = Split_Split[3].split()
				Split_Balance[1] = str(int(Split_Balance[1]) + int(Deposit_Option)) 
				Attach_SplitBalance = [str(Dt) for Dt in Split_Balance] #Combine String and Integer in a list
				ReAttach_SplitBalance = " ".join(Attach_SplitBalance)
				Split_Split[3] = ReAttach_SplitBalance
				Split_Split[4] = "+RM " + Deposit_Option
				Split_Split[6] = Now_Date.strftime("%d %B %Y")
				ReAttach_SplitSplit = ":".join(Split_Split) + "\n"
				print("Account Balance : " + Split_Split[3])
				Store_Dt = open("UserTransaction.txt", "a")
				Store_Dt.write(ReAttach_SplitSplit)
				# elif Deposit_Option == "Other":
				# 	Deposit_Other = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter nominal to deposit : ")
				# 	print("~~~~~~~~~~~~~~~~~~~~")
				# 	with open("UserTransaction.txt", "r") as Store_Transaction:
				# 		for Lines in Store_Transaction:
				# 			Split_Split = Lines.strip("\n").split(":")
				# 			if User_Name == Split_Split[0] and User_ID == Split_Split[1]:
				# 				Split_Balance = Split_Split[2].split()
				# 				Split_Balance[1] = str(int(Split_Balance[1]) + int(Deposit_Other)) 
				# 				Attach_SplitBalance = [str(Dt) for Dt in Split_Balance]
				# 				ReAttach_SplitBalance = " ".join(Attach_SplitBalance)
				# 				Split_Split[2] = ReAttach_SplitBalance
				# 				Split_Split[3] = "+RM " + Deposit_Other
				# 				Split_Split[5] = Now_Date.strftime("%d %B %Y - %H:%M:%S")
				# 				ReAttach_SplitSplit = ":".join(Split_Split) + "\n"
				# 	Store_Dt = open("UserTransaction.txt", "a")
				# 	Store_Dt.write(ReAttach_SplitSplit)
			elif User_Option == "2":
				Withdraw_Option = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter nominal to withdraw : ")
				print("~~~~~~~~~~~~~~~~~~~~")
				Split_Balance = Split_Split[3].split()
				if int(Split_Balance[1]) < 500:
					print("Balance not enough! Please deposit or win the lottery.")
					quit()
				else:
					Split_Balance[1] = str(int(Split_Balance[1]) - int(Withdraw_Option)) 
					Attach_SplitBalance = [str(Dt) for Dt in Split_Balance]
					ReAttach_SplitBalance = " ".join(Attach_SplitBalance)
					Split_Split[3] = ReAttach_SplitBalance
					Split_Split[5] = "-RM " + Withdraw_Option
					Split_Split[6] = Now_Date.strftime("%d %B %Y")
					ReAttach_SplitSplit = ":".join(Split_Split) + "\n"
					print("Account Balance : " + Split_Split[3])

				Store_Dt = open("UserTransaction.txt", "a")
				Store_Dt.write(ReAttach_SplitSplit)
			elif User_Option == "3":
				print("Account Balance : " + Split_Split[3])
			elif User_Option == "4":
				fc = 0
				Pass_Input = input("Enter new password : ")
				with open("UserRecords.txt", "r") as Fetch_Dt:
					for Line in Fetch_Dt:
						Split_Split = Line.strip("\n").split(":")
						# if User_Name == Split_Split[0] and User_ID == Split_Split[4]:
						if Line.startswith(User_Name) == False:
							fc += 1
						Split_Split[5] = Pass_Input
						New_Pass = ":".join(Split_Split) + "\n"
				Fetch_DD = open("UserRecords.txt", "r")
				Store_DD = Fetch_DD.readlines()
				Store_DD[fc] = New_Pass

				Over_Write = open("UserRecords.txt", "w")
				Over_Write.writelines(Store_DD)
				Over_Write.close()
			elif User_Option == "5":
				Mutation_Opt = input("\n~~~~~~~~~~~~~~~~~~~~ \nEnter Date (ex: 22 November 2020) \n : ")
				print("~~~~~~~~~~~~~~~~~~~~")
				with open("UserTransaction.txt", "r") as Fetch_Fetch:
					for Lines in Fetch_Fetch:
						Split_Split = Lines.strip("\n").split(":")
						if Mutation_Opt == Split_Split[6]:
							print("|| User Name : " + Split_Split[0] + " || User ID : " + Split_Split[1] + " || User Balance : " + Split_Split[3] + " || Deposit : " + Split_Split[4] + " || Withdrawal : " + Split_Split[5] + " || Date : " + Split_Split[6] + " ||")
				
			elif User_Option == "6":
				Store_Transaction.close()
				break

def Reg_User_Interf(User_Name, User_ID, User_Account_Type):
	print("\n~~~~~~~~~~~~~~~~~~~~ \nUSER INTERFACE \n~~~~~~~~~~~~~~~~~~~~ \nWelcome " + User_Name + "!" )
	if User_Account_Type == "3.1":
		Reg_User_Savings_Interf(User_Name, User_ID)
	elif User_Account_Type == "3.2":
		Reg_User_Current_Interf(User_Name, User_ID)

def Main_Login_Page():
	while True:
		print("\n~~~~~~~~~~~~~~~~~~~~ \nLOGIN PAGE \n~~~~~~~~~~~~~~~~~~~~ \n")
		User_Opt = input("Press 'Q' to Quit the program. Enter to continue ")
		if User_Opt == "Q":
			quit()
		else: 
			pass
		User_ID = input("Enter User ID : ")
		User_Password = input("Enter Password : ")
		
		with open("UserRecords.txt", "r") as Fetch_User_Records:
			for Line in Fetch_User_Records:
				Slice_Data = Line.strip("\n").split(":")
				if User_ID == Slice_Data[4] and User_Password == Slice_Data[5]: #If there's an error do not panic, because it cannot stay on loop when changing the password
					if Slice_Data[6] == "1":
						Super_Admin_Interf(Slice_Data[0])
					elif Slice_Data[6] == "2":
						Bank_Admin_Interf(Slice_Data[0])
					elif Slice_Data[6] == "3.1" or Slice_Data[6] == "3.2":
						Reg_User_Interf(Slice_Data[0], User_ID, Slice_Data[6])
					else:
						print("Error!")
						quit()
		
Main_Login_Page()
